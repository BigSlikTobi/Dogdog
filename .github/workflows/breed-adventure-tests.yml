name: Breed Adventure Tests

on:
  push:
    branches: [ main, develop, tests/dog_breed_adventure-CICD ]
    paths:
      # Breed Adventure specific files
      - 'dogdog_trivia_game/lib/models/breed_adventure/**'
      - 'dogdog_trivia_game/lib/controllers/breed_adventure/**'
      - 'dogdog_trivia_game/lib/services/breed_adventure/**'
      - 'dogdog_trivia_game/lib/widgets/breed_adventure/**'
      - 'dogdog_trivia_game/lib/screens/dog_breeds_adventure_screen.dart'
      # Test files
      - 'dogdog_trivia_game/test/breed_adventure/**'
      # Shared dependencies that affect breed adventure
      - 'dogdog_trivia_game/lib/models/shared/**'
      - 'dogdog_trivia_game/lib/widgets/shared/**'
      - 'dogdog_trivia_game/lib/design_system/**'
      - 'dogdog_trivia_game/lib/l10n/**'
      # Configuration files
      - 'dogdog_trivia_game/pubspec.yaml'
      - 'dogdog_trivia_game/analysis_options.yaml'
      - '.github/workflows/breed-adventure-tests.yml'

  pull_request:
    branches: [ main, develop ]
    paths:
      # Same paths as push trigger
      - 'dogdog_trivia_game/lib/models/breed_adventure/**'
      - 'dogdog_trivia_game/lib/controllers/breed_adventure/**'
      - 'dogdog_trivia_game/lib/services/breed_adventure/**'
      - 'dogdog_trivia_game/lib/widgets/breed_adventure/**'
      - 'dogdog_trivia_game/lib/screens/dog_breeds_adventure_screen.dart'
      - 'dogdog_trivia_game/test/breed_adventure/**'
      - 'dogdog_trivia_game/lib/models/shared/**'
      - 'dogdog_trivia_game/lib/widgets/shared/**'
      - 'dogdog_trivia_game/lib/design_system/**'
      - 'dogdog_trivia_game/lib/l10n/**'
      - 'dogdog_trivia_game/pubspec.yaml'
      - 'dogdog_trivia_game/analysis_options.yaml'

  # Allow manual triggering for testing
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.32.8'
  COVERAGE_THRESHOLD: 90

jobs:
  breed-adventure-tests:
    name: üêï Breed Adventure Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: üìö Checkout repository
      uses: actions/checkout@v4

    - name: üöÄ Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: üì¶ Install dependencies
      run: |
        cd dogdog_trivia_game
        flutter pub get

    - name: üîç Verify Flutter installation
      run: |
        cd dogdog_trivia_game
        flutter doctor -v

    - name: üßπ Check code formatting
      run: |
        cd dogdog_trivia_game
        dart format --set-exit-if-changed lib/models/breed_adventure/ lib/controllers/breed_adventure/ lib/services/breed_adventure/ lib/widgets/breed_adventure/ lib/screens/dog_breeds_adventure_screen.dart test/breed_adventure/

    - name: üîç Run static analysis on breed adventure code
      run: |
        cd dogdog_trivia_game
        echo "üîç Running analysis on breed adventure specific files..."
        flutter analyze lib/models/breed_adventure/ || echo "‚ö†Ô∏è Analysis issues in models"
        flutter analyze lib/controllers/breed_adventure/ || echo "‚ö†Ô∏è Analysis issues in controllers"
        flutter analyze lib/services/breed_adventure/ || echo "‚ö†Ô∏è Analysis issues in services"
        flutter analyze lib/widgets/breed_adventure/ || echo "‚ö†Ô∏è Analysis issues in widgets"
        flutter analyze lib/screens/dog_breeds_adventure_screen.dart || echo "‚ö†Ô∏è Analysis issues in screen"
        flutter analyze test/breed_adventure/ || echo "‚ö†Ô∏è Analysis issues in tests"

    - name: üåê Generate localization files
      run: |
        cd dogdog_trivia_game
        flutter gen-l10n

    - name: üìä Verify test structure
      run: |
        cd dogdog_trivia_game
        echo "üìä Verifying breed adventure test structure..."
        
        # Count different types of tests
        unit_tests=$(find test/breed_adventure/unit -name "*.dart" 2>/dev/null | wc -l || echo "0")
        integration_tests=$(find test/breed_adventure/integration -name "*.dart" 2>/dev/null | wc -l || echo "0")
        total_tests=$(find test/breed_adventure -name "*.dart" -not -name "*.mocks.dart" 2>/dev/null | wc -l || echo "0")
        
        echo "üìã Test Summary:"
        echo "  ‚Ä¢ Unit tests: $unit_tests"
        echo "  ‚Ä¢ Integration tests: $integration_tests"
        echo "  ‚Ä¢ Total test files: $total_tests"
        
        if [ "$total_tests" -lt 5 ]; then
          echo "‚ö†Ô∏è Warning: Low number of test files detected"
        else
          echo "‚úÖ Good test coverage structure detected!"
        fi

    - name: üß™ Run breed adventure unit tests
      run: |
        cd dogdog_trivia_game
        echo "üß™ Running breed adventure unit tests..."
        flutter test test/breed_adventure/unit/ --coverage --reporter=expanded
        echo "‚úÖ Unit tests completed!"

    - name: üîó Run breed adventure integration tests
      run: |
        cd dogdog_trivia_game
        echo "üîó Running breed adventure integration tests..."
        flutter test test/breed_adventure/integration/ --coverage --reporter=expanded
        echo "‚úÖ Integration tests completed!"

    - name: üìà Generate and check coverage
      run: |
        cd dogdog_trivia_game
        echo "üìà Analyzing test coverage for breed adventure..."
        
        # Check if coverage file exists
        if [ ! -f coverage/lcov.info ]; then
          echo "‚ùå No coverage file found"
          exit 1
        fi
        
        # Extract breed adventure file coverage
        echo "üìä Coverage for breed adventure files:"
        
        # Look for breed adventure specific files in coverage
        breed_adventure_files=$(grep -E "SF:.*breed_adventure" coverage/lcov.info | wc -l || echo "0")
        echo "  ‚Ä¢ Breed adventure files in coverage: $breed_adventure_files"
        
        # Calculate approximate coverage for breed adventure files
        if grep -q "breed_adventure" coverage/lcov.info; then
          echo "‚úÖ Breed adventure files found in coverage report"
          
          # Extract coverage data for breed adventure files
          awk '
          /SF:.*breed_adventure/ { 
            file = $0
            getline; while (!/^SF:/ && !/^end_of_record/ && NF > 0) {
              if (/^LF:/) lines_found = substr($0, 4)
              if (/^LH:/) lines_hit = substr($0, 4)
              getline
            }
            if (lines_found > 0) {
              coverage = (lines_hit / lines_found) * 100
              printf "  ‚Ä¢ %s: %.1f%% (%d/%d lines)\n", file, coverage, lines_hit, lines_found
            }
          }' coverage/lcov.info
        else
          echo "‚ö†Ô∏è No breed adventure files found in coverage report"
        fi
        
        # Overall coverage check
        total_lines=$(grep "^LF:" coverage/lcov.info | awk -F: '{sum += $2} END {print sum}')
        hit_lines=$(grep "^LH:" coverage/lcov.info | awk -F: '{sum += $2} END {print sum}')
        
        if [ "$total_lines" -gt 0 ]; then
          overall_coverage=$(echo "scale=2; $hit_lines * 100 / $total_lines" | bc -l 2>/dev/null || python3 -c "print(f'{$hit_lines * 100 / $total_lines:.2f}')" 2>/dev/null || awk "BEGIN {printf \"%.2f\", $hit_lines * 100 / $total_lines}")
          echo "üìä Overall coverage: ${overall_coverage}% ($hit_lines/$total_lines lines)"
          
          # Check if coverage meets threshold
          coverage_int=$(echo "$overall_coverage" | cut -d. -f1)
          if [ "$coverage_int" -ge "$COVERAGE_THRESHOLD" ]; then
            echo "‚úÖ Coverage threshold met: ${overall_coverage}% >= ${COVERAGE_THRESHOLD}%"
          else
            echo "‚ùå Coverage below threshold: ${overall_coverage}% < ${COVERAGE_THRESHOLD}%"
            echo "üí° Please add more tests to improve coverage"
            exit 1
          fi
        else
          echo "‚ùå No coverage data found"
          exit 1
        fi

    - name: üì§ Upload coverage artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: breed-adventure-coverage
        path: dogdog_trivia_game/coverage/
        retention-days: 7

    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./dogdog_trivia_game/coverage/lcov.info
        flags: breed-adventure
        name: breed-adventure-coverage
        fail_ci_if_error: false

    - name: üìù Coverage Summary
      if: always()
      run: |
        cd dogdog_trivia_game
        echo "üìù Breed Adventure Test Summary:"
        echo "=================================="
        echo "‚úÖ All breed adventure tests passed!"
        echo "üìä Coverage report generated"
        echo "üöÄ Ready for deployment"
        echo ""
        echo "üîó View full coverage report in artifacts"

  # Quality gate job that depends on main test job
  quality-gate:
    name: üö¶ Quality Gate
    runs-on: ubuntu-latest
    needs: breed-adventure-tests
    if: always()

    steps:
    - name: ‚úÖ Check test results
      run: |
        if [ "${{ needs.breed-adventure-tests.result }}" = "success" ]; then
          echo "‚úÖ All breed adventure tests passed!"
          echo "üöÄ Quality gate: PASSED"
        else
          echo "‚ùå Breed adventure tests failed!"
          echo "üõë Quality gate: FAILED"
          exit 1
        fi

    - name: üéâ Success notification
      if: needs.breed-adventure-tests.result == 'success'
      run: |
        echo "üéâ Breed Adventure Feature is ready for deployment!"
        echo "üìä All tests passed with sufficient coverage"
        echo "üöÄ Changes can be safely merged"