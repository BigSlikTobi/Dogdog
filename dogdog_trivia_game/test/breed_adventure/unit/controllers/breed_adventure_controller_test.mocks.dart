// Mocks generated by Mockito 5.4.6 from annotations
// in dogdog_trivia_game/test/breed_adventure/unit/controllers/breed_adventure_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:dogdog_trivia_game/controllers/breed_adventure/breed_adventure_power_up_controller.dart'
    as _i11;
import 'package:dogdog_trivia_game/models/game_session.dart' as _i16;
import 'package:dogdog_trivia_game/models/models.dart' as _i2;
import 'package:dogdog_trivia_game/models/path_progress.dart' as _i4;
import 'package:dogdog_trivia_game/services/audio_service.dart' as _i12;
import 'package:dogdog_trivia_game/services/breed_adventure/breed_adventure_timer.dart'
    as _i9;
import 'package:dogdog_trivia_game/services/breed_adventure/breed_service.dart'
    as _i5;
import 'package:dogdog_trivia_game/services/error_service.dart' as _i14;
import 'package:dogdog_trivia_game/services/game_persistence_service.dart'
    as _i15;
import 'package:dogdog_trivia_game/services/image_cache_service.dart' as _i3;
import 'package:dogdog_trivia_game/services/progress_service.dart' as _i13;
import 'package:flutter/material.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBreedChallenge_0 extends _i1.SmartFake
    implements _i2.BreedChallenge {
  _FakeBreedChallenge_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeImageCacheStats_1 extends _i1.SmartFake
    implements _i3.ImageCacheStats {
  _FakeImageCacheStats_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePlayerProgress_2 extends _i1.SmartFake
    implements _i2.PlayerProgress {
  _FakePlayerProgress_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePathProgress_3 extends _i1.SmartFake implements _i4.PathProgress {
  _FakePathProgress_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BreedService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreedService extends _i1.Mock implements _i5.BreedService {
  MockBreedService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Breed> get allBreeds =>
      (super.noSuchMethod(
            Invocation.getter(#allBreeds),
            returnValue: <_i2.Breed>[],
          )
          as List<_i2.Breed>);

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  List<_i2.Breed> getBreedsByDifficultyPhase(_i2.DifficultyPhase? phase) =>
      (super.noSuchMethod(
            Invocation.method(#getBreedsByDifficultyPhase, [phase]),
            returnValue: <_i2.Breed>[],
          )
          as List<_i2.Breed>);

  @override
  int getTotalBreedsInPhase(_i2.DifficultyPhase? phase) =>
      (super.noSuchMethod(
            Invocation.method(#getTotalBreedsInPhase, [phase]),
            returnValue: 0,
          )
          as int);

  @override
  String getLocalizedBreedName(String? breedName, _i7.Locale? locale) =>
      (super.noSuchMethod(
            Invocation.method(#getLocalizedBreedName, [breedName, locale]),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getLocalizedBreedName, [breedName, locale]),
            ),
          )
          as String);

  @override
  _i6.Future<_i2.BreedChallenge> generateChallenge(
    _i2.DifficultyPhase? phase,
    Set<String>? usedBreeds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateChallenge, [phase, usedBreeds]),
            returnValue: _i6.Future<_i2.BreedChallenge>.value(
              _FakeBreedChallenge_0(
                this,
                Invocation.method(#generateChallenge, [phase, usedBreeds]),
              ),
            ),
          )
          as _i6.Future<_i2.BreedChallenge>);

  @override
  List<_i2.Breed> getAvailableBreeds(
    _i2.DifficultyPhase? phase,
    Set<String>? usedBreeds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableBreeds, [phase, usedBreeds]),
            returnValue: <_i2.Breed>[],
          )
          as List<_i2.Breed>);

  @override
  bool hasAvailableBreeds(
    _i2.DifficultyPhase? phase,
    Set<String>? usedBreeds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#hasAvailableBreeds, [phase, usedBreeds]),
            returnValue: false,
          )
          as bool);

  @override
  _i2.Breed? getBreedByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#getBreedByName, [name]))
          as _i2.Breed?);

  @override
  List<String> getSupportedLanguages() =>
      (super.noSuchMethod(
            Invocation.method(#getSupportedLanguages, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  bool hasTranslation(String? breedName) =>
      (super.noSuchMethod(
            Invocation.method(#hasTranslation, [breedName]),
            returnValue: false,
          )
          as bool);

  @override
  Map<_i2.DifficultyPhase, int> getBreedDistribution() =>
      (super.noSuchMethod(
            Invocation.method(#getBreedDistribution, []),
            returnValue: <_i2.DifficultyPhase, int>{},
          )
          as Map<_i2.DifficultyPhase, int>);

  @override
  void reset() => super.noSuchMethod(
    Invocation.method(#reset, []),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.Breed> getBreedsForPhaseWithFallback(_i2.DifficultyPhase? phase) =>
      (super.noSuchMethod(
            Invocation.method(#getBreedsForPhaseWithFallback, [phase]),
            returnValue: <_i2.Breed>[],
          )
          as List<_i2.Breed>);

  @override
  _i6.Future<_i2.BreedChallenge> generateChallengeWithFallback(
    _i2.DifficultyPhase? phase,
    Set<String>? usedBreeds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateChallengeWithFallback, [
              phase,
              usedBreeds,
            ]),
            returnValue: _i6.Future<_i2.BreedChallenge>.value(
              _FakeBreedChallenge_0(
                this,
                Invocation.method(#generateChallengeWithFallback, [
                  phase,
                  usedBreeds,
                ]),
              ),
            ),
          )
          as _i6.Future<_i2.BreedChallenge>);

  @override
  bool validateBreedData() =>
      (super.noSuchMethod(
            Invocation.method(#validateBreedData, []),
            returnValue: false,
          )
          as bool);

  @override
  _i6.Future<void> recoverFromError() =>
      (super.noSuchMethod(
            Invocation.method(#recoverFromError, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [BreedAdventureTimer].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreedAdventureTimer extends _i1.Mock
    implements _i9.BreedAdventureTimer {
  MockBreedAdventureTimer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get remainingSeconds =>
      (super.noSuchMethod(Invocation.getter(#remainingSeconds), returnValue: 0)
          as int);

  @override
  bool get isActive =>
      (super.noSuchMethod(Invocation.getter(#isActive), returnValue: false)
          as bool);

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);

  @override
  bool get isRunning =>
      (super.noSuchMethod(Invocation.getter(#isRunning), returnValue: false)
          as bool);

  @override
  bool get hasExpired =>
      (super.noSuchMethod(Invocation.getter(#hasExpired), returnValue: false)
          as bool);

  @override
  _i6.Stream<int> get timerStream =>
      (super.noSuchMethod(
            Invocation.getter(#timerStream),
            returnValue: _i6.Stream<int>.empty(),
          )
          as _i6.Stream<int>);

  @override
  bool get isCritical =>
      (super.noSuchMethod(Invocation.getter(#isCritical), returnValue: false)
          as bool);

  @override
  bool get isWarning =>
      (super.noSuchMethod(Invocation.getter(#isWarning), returnValue: false)
          as bool);

  @override
  _i9.TimerState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i9.TimerState.inactive,
          )
          as _i9.TimerState);

  @override
  void start({int? duration = 10}) => super.noSuchMethod(
    Invocation.method(#start, [], {#duration: duration}),
    returnValueForMissingStub: null,
  );

  @override
  void addTime(int? seconds) => super.noSuchMethod(
    Invocation.method(#addTime, [seconds]),
    returnValueForMissingStub: null,
  );

  @override
  void pause() => super.noSuchMethod(
    Invocation.method(#pause, []),
    returnValueForMissingStub: null,
  );

  @override
  void resume() => super.noSuchMethod(
    Invocation.method(#resume, []),
    returnValueForMissingStub: null,
  );

  @override
  void stop() => super.noSuchMethod(
    Invocation.method(#stop, []),
    returnValueForMissingStub: null,
  );

  @override
  void reset({int? duration = 10}) => super.noSuchMethod(
    Invocation.method(#reset, [], {#duration: duration}),
    returnValueForMissingStub: null,
  );

  @override
  int getElapsedTime({int? originalDuration = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getElapsedTime, [], {
              #originalDuration: originalDuration,
            }),
            returnValue: 0,
          )
          as int);

  @override
  double getProgress({int? originalDuration = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getProgress, [], {
              #originalDuration: originalDuration,
            }),
            returnValue: 0.0,
          )
          as double);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetInstance() => super.noSuchMethod(
    Invocation.method(#resetInstance, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ImageCacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageCacheService extends _i1.Mock implements _i3.ImageCacheService {
  MockImageCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<bool> cacheImage(_i10.BuildContext? context, String? imageUrl) =>
      (super.noSuchMethod(
            Invocation.method(#cacheImage, [context, imageUrl]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> preloadImages(
    _i10.BuildContext? context,
    List<String>? imageUrls,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#preloadImages, [context, imageUrls]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  bool isImageCached(String? imageUrl) =>
      (super.noSuchMethod(
            Invocation.method(#isImageCached, [imageUrl]),
            returnValue: false,
          )
          as bool);

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearStatistics() => super.noSuchMethod(
    Invocation.method(#clearStatistics, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetFailedUrls() => super.noSuchMethod(
    Invocation.method(#resetFailedUrls, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.ImageCacheStats getStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getStatistics, []),
            returnValue: _FakeImageCacheStats_1(
              this,
              Invocation.method(#getStatistics, []),
            ),
          )
          as _i3.ImageCacheStats);
}

/// A class which mocks [BreedAdventurePowerUpController].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreedAdventurePowerUpController extends _i1.Mock
    implements _i11.BreedAdventurePowerUpController {
  MockBreedAdventurePowerUpController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<_i2.PowerUpType, int> get powerUps =>
      (super.noSuchMethod(
            Invocation.getter(#powerUps),
            returnValue: <_i2.PowerUpType, int>{},
          )
          as Map<_i2.PowerUpType, int>);

  @override
  int get totalPowerUpCount =>
      (super.noSuchMethod(Invocation.getter(#totalPowerUpCount), returnValue: 0)
          as int);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void initializeForBreedAdventure() => super.noSuchMethod(
    Invocation.method(#initializeForBreedAdventure, []),
    returnValueForMissingStub: null,
  );

  @override
  String? applyBreedHint(_i2.BreedChallenge? challenge) =>
      (super.noSuchMethod(Invocation.method(#applyBreedHint, [challenge]))
          as String?);

  @override
  int applyBreedExtraTime() =>
      (super.noSuchMethod(
            Invocation.method(#applyBreedExtraTime, []),
            returnValue: 0,
          )
          as int);

  @override
  bool applyBreedSkip() =>
      (super.noSuchMethod(
            Invocation.method(#applyBreedSkip, []),
            returnValue: false,
          )
          as bool);

  @override
  bool applyBreedSecondChance() =>
      (super.noSuchMethod(
            Invocation.method(#applyBreedSecondChance, []),
            returnValue: false,
          )
          as bool);

  @override
  void trackCorrectAnswer() => super.noSuchMethod(
    Invocation.method(#trackCorrectAnswer, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetForNewGame() => super.noSuchMethod(
    Invocation.method(#resetForNewGame, []),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> getUsageStats() =>
      (super.noSuchMethod(
            Invocation.method(#getUsageStats, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  bool isCloseToReward() =>
      (super.noSuchMethod(
            Invocation.method(#isCloseToReward, []),
            returnValue: false,
          )
          as bool);

  @override
  String getPowerUpCelebrationMessage(_i2.PowerUpType? powerUpType) =>
      (super.noSuchMethod(
            Invocation.method(#getPowerUpCelebrationMessage, [powerUpType]),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getPowerUpCelebrationMessage, [powerUpType]),
            ),
          )
          as String);

  @override
  String getPowerUpDescription(_i2.PowerUpType? powerUpType) =>
      (super.noSuchMethod(
            Invocation.method(#getPowerUpDescription, [powerUpType]),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getPowerUpDescription, [powerUpType]),
            ),
          )
          as String);

  @override
  bool isPowerUpAvailableInBreedAdventure(_i2.PowerUpType? powerUpType) =>
      (super.noSuchMethod(
            Invocation.method(#isPowerUpAvailableInBreedAdventure, [
              powerUpType,
            ]),
            returnValue: false,
          )
          as bool);

  @override
  int getPowerUpCount(_i2.PowerUpType? type) =>
      (super.noSuchMethod(
            Invocation.method(#getPowerUpCount, [type]),
            returnValue: 0,
          )
          as int);

  @override
  bool canUsePowerUp(_i2.PowerUpType? type) =>
      (super.noSuchMethod(
            Invocation.method(#canUsePowerUp, [type]),
            returnValue: false,
          )
          as bool);

  @override
  void addPowerUp(_i2.PowerUpType? type, int? count) => super.noSuchMethod(
    Invocation.method(#addPowerUp, [type, count]),
    returnValueForMissingStub: null,
  );

  @override
  void addPowerUps(Map<_i2.PowerUpType, int>? powerUpsToAdd) =>
      super.noSuchMethod(
        Invocation.method(#addPowerUps, [powerUpsToAdd]),
        returnValueForMissingStub: null,
      );

  @override
  bool usePowerUp(_i2.PowerUpType? type) =>
      (super.noSuchMethod(
            Invocation.method(#usePowerUp, [type]),
            returnValue: false,
          )
          as bool);

  @override
  List<int> applyFiftyFifty(_i2.Question? question) =>
      (super.noSuchMethod(
            Invocation.method(#applyFiftyFifty, [question]),
            returnValue: <int>[],
          )
          as List<int>);

  @override
  String? applyHint(_i2.Question? question) =>
      (super.noSuchMethod(Invocation.method(#applyHint, [question]))
          as String?);

  @override
  int applyExtraTime() =>
      (super.noSuchMethod(
            Invocation.method(#applyExtraTime, []),
            returnValue: 0,
          )
          as int);

  @override
  bool applySkip() =>
      (super.noSuchMethod(Invocation.method(#applySkip, []), returnValue: false)
          as bool);

  @override
  bool applySecondChance() =>
      (super.noSuchMethod(
            Invocation.method(#applySecondChance, []),
            returnValue: false,
          )
          as bool);

  @override
  void setPowerUps(Map<_i2.PowerUpType, int>? newPowerUps) =>
      super.noSuchMethod(
        Invocation.method(#setPowerUps, [newPowerUps]),
        returnValueForMissingStub: null,
      );

  @override
  void resetPowerUps() => super.noSuchMethod(
    Invocation.method(#resetPowerUps, []),
    returnValueForMissingStub: null,
  );

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  void fromJson(Map<String, dynamic>? json) => super.noSuchMethod(
    Invocation.method(#fromJson, [json]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AudioService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioService extends _i1.Mock implements _i12.AudioService {
  MockAudioService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isMuted =>
      (super.noSuchMethod(Invocation.getter(#isMuted), returnValue: false)
          as bool);

  @override
  double get volume =>
      (super.noSuchMethod(Invocation.getter(#volume), returnValue: 0.0)
          as double);

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> toggleMute() =>
      (super.noSuchMethod(
            Invocation.method(#toggleMute, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setMuted(bool? muted) =>
      (super.noSuchMethod(
            Invocation.method(#setMuted, [muted]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> setVolume(double? volume) =>
      (super.noSuchMethod(
            Invocation.method(#setVolume, [volume]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> playCorrectAnswerSound() =>
      (super.noSuchMethod(
            Invocation.method(#playCorrectAnswerSound, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> playIncorrectAnswerSound() =>
      (super.noSuchMethod(
            Invocation.method(#playIncorrectAnswerSound, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> playButtonSound() =>
      (super.noSuchMethod(
            Invocation.method(#playButtonSound, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> playPowerUpSound() =>
      (super.noSuchMethod(
            Invocation.method(#playPowerUpSound, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> playAchievementSound() =>
      (super.noSuchMethod(
            Invocation.method(#playAchievementSound, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> playTimerWarningSound() =>
      (super.noSuchMethod(
            Invocation.method(#playTimerWarningSound, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> playCheckpointCompleteSound() =>
      (super.noSuchMethod(
            Invocation.method(#playCheckpointCompleteSound, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> playPathCompleteSound() =>
      (super.noSuchMethod(
            Invocation.method(#playPathCompleteSound, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> playStreakBonusSound() =>
      (super.noSuchMethod(
            Invocation.method(#playStreakBonusSound, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> playPowerUpActivateSound() =>
      (super.noSuchMethod(
            Invocation.method(#playPowerUpActivateSound, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> playMilestoneSound() =>
      (super.noSuchMethod(
            Invocation.method(#playMilestoneSound, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> playPowerUpSpecificSound(_i2.PowerUpType? powerUpType) =>
      (super.noSuchMethod(
            Invocation.method(#playPowerUpSpecificSound, [powerUpType]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [ProgressService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProgressService extends _i1.Mock implements _i13.ProgressService {
  MockProgressService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PlayerProgress get currentProgress =>
      (super.noSuchMethod(
            Invocation.getter(#currentProgress),
            returnValue: _FakePlayerProgress_2(
              this,
              Invocation.getter(#currentProgress),
            ),
          )
          as _i2.PlayerProgress);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i2.Achievement>> recordCorrectAnswer({
    required int? pointsEarned,
    required int? currentStreak,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#recordCorrectAnswer, [], {
              #pointsEarned: pointsEarned,
              #currentStreak: currentStreak,
            }),
            returnValue: _i6.Future<List<_i2.Achievement>>.value(
              <_i2.Achievement>[],
            ),
          )
          as _i6.Future<List<_i2.Achievement>>);

  @override
  _i6.Future<void> recordIncorrectAnswer() =>
      (super.noSuchMethod(
            Invocation.method(#recordIncorrectAnswer, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> recordGameCompletion({
    required int? finalScore,
    required int? levelReached,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#recordGameCompletion, [], {
              #finalScore: finalScore,
              #levelReached: levelReached,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> recordDailyChallengeCompletion() =>
      (super.noSuchMethod(
            Invocation.method(#recordDailyChallengeCompletion, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> unlockContent(String? contentId) =>
      (super.noSuchMethod(
            Invocation.method(#unlockContent, [contentId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  bool isContentUnlocked(String? contentId) =>
      (super.noSuchMethod(
            Invocation.method(#isContentUnlocked, [contentId]),
            returnValue: false,
          )
          as bool);

  @override
  List<_i2.Achievement> getUnlockedAchievements() =>
      (super.noSuchMethod(
            Invocation.method(#getUnlockedAchievements, []),
            returnValue: <_i2.Achievement>[],
          )
          as List<_i2.Achievement>);

  @override
  List<_i2.Achievement> getLockedAchievements() =>
      (super.noSuchMethod(
            Invocation.method(#getLockedAchievements, []),
            returnValue: <_i2.Achievement>[],
          )
          as List<_i2.Achievement>);

  @override
  double getProgressToNextRank() =>
      (super.noSuchMethod(
            Invocation.method(#getProgressToNextRank, []),
            returnValue: 0.0,
          )
          as double);

  @override
  _i6.Future<void> resetProgress() =>
      (super.noSuchMethod(
            Invocation.method(#resetProgress, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  String exportProgress() =>
      (super.noSuchMethod(
            Invocation.method(#exportProgress, []),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#exportProgress, []),
            ),
          )
          as String);

  @override
  _i6.Future<bool> importProgress(String? jsonString) =>
      (super.noSuchMethod(
            Invocation.method(#importProgress, [jsonString]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  Map<String, dynamic> getStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getStatistics, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i6.Future<bool> isFirstLaunch() =>
      (super.noSuchMethod(
            Invocation.method(#isFirstLaunch, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<_i2.PlayerProgress> getPlayerProgress() =>
      (super.noSuchMethod(
            Invocation.method(#getPlayerProgress, []),
            returnValue: _i6.Future<_i2.PlayerProgress>.value(
              _FakePlayerProgress_2(
                this,
                Invocation.method(#getPlayerProgress, []),
              ),
            ),
          )
          as _i6.Future<_i2.PlayerProgress>);

  @override
  _i6.Future<void> forceSave() =>
      (super.noSuchMethod(
            Invocation.method(#forceSave, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  bool hasUnsavedChanges() =>
      (super.noSuchMethod(
            Invocation.method(#hasUnsavedChanges, []),
            returnValue: false,
          )
          as bool);

  @override
  _i6.Future<Map<String, dynamic>> getDataIntegrityStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getDataIntegrityStatus, []),
            returnValue: _i6.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i6.Future<Map<String, dynamic>>);

  @override
  bool validateProgressData() =>
      (super.noSuchMethod(
            Invocation.method(#validateProgressData, []),
            returnValue: false,
          )
          as bool);

  @override
  _i6.Future<bool> repairData() =>
      (super.noSuchMethod(
            Invocation.method(#repairData, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> saveCustomData(String? key, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#saveCustomData, [key, data]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<Map<String, dynamic>?> loadCustomData(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#loadCustomData, [key]),
            returnValue: _i6.Future<Map<String, dynamic>?>.value(),
          )
          as _i6.Future<Map<String, dynamic>?>);

  @override
  _i6.Future<void> removeCustomData(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#removeCustomData, [key]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  List<String> getCustomDataKeys() =>
      (super.noSuchMethod(
            Invocation.method(#getCustomDataKeys, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ErrorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorService extends _i1.Mock implements _i14.ErrorService {
  MockErrorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i14.AppError> get errorStream =>
      (super.noSuchMethod(
            Invocation.getter(#errorStream),
            returnValue: _i6.Stream<_i14.AppError>.empty(),
          )
          as _i6.Stream<_i14.AppError>);

  @override
  List<_i14.AppError> get errorHistory =>
      (super.noSuchMethod(
            Invocation.getter(#errorHistory),
            returnValue: <_i14.AppError>[],
          )
          as List<_i14.AppError>);

  @override
  _i6.Future<void> recordError(
    _i2.ErrorType? type,
    String? message, {
    _i2.ErrorSeverity? severity = _i2.ErrorSeverity.medium,
    StackTrace? stackTrace,
    Object? originalError,
    String? technicalDetails,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #recordError,
              [type, message],
              {
                #severity: severity,
                #stackTrace: stackTrace,
                #originalError: originalError,
                #technicalDetails: technicalDetails,
              },
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> handleNetworkError(
    Object? error, {
    StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #handleNetworkError,
              [error],
              {#stackTrace: stackTrace},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> handleStorageError(
    Object? error, {
    StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #handleStorageError,
              [error],
              {#stackTrace: stackTrace},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> handleAudioError(Object? error, {StackTrace? stackTrace}) =>
      (super.noSuchMethod(
            Invocation.method(
              #handleAudioError,
              [error],
              {#stackTrace: stackTrace},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> handleGameLogicError(
    Object? error, {
    StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #handleGameLogicError,
              [error],
              {#stackTrace: stackTrace},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> handleUIError(
    Object? error, {
    StackTrace? stackTrace,
    String? widgetContext,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #handleUIError,
              [error],
              {#stackTrace: stackTrace, #widgetContext: widgetContext},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> handlePlatformError(
    Object? error, {
    StackTrace? stackTrace,
    String? platform,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #handlePlatformError,
              [error],
              {#stackTrace: stackTrace, #platform: platform},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void clearErrorHistory() => super.noSuchMethod(
    Invocation.method(#clearErrorHistory, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GamePersistenceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGamePersistenceService extends _i1.Mock
    implements _i15.GamePersistenceService {
  MockGamePersistenceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> savePathProgress(_i4.PathProgress? progress) =>
      (super.noSuchMethod(
            Invocation.method(#savePathProgress, [progress]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i4.PathProgress?> loadPathProgress(_i2.PathType? pathType) =>
      (super.noSuchMethod(
            Invocation.method(#loadPathProgress, [pathType]),
            returnValue: _i6.Future<_i4.PathProgress?>.value(),
          )
          as _i6.Future<_i4.PathProgress?>);

  @override
  _i6.Future<Map<_i2.PathType, _i4.PathProgress>> loadAllPathProgress() =>
      (super.noSuchMethod(
            Invocation.method(#loadAllPathProgress, []),
            returnValue: _i6.Future<Map<_i2.PathType, _i4.PathProgress>>.value(
              <_i2.PathType, _i4.PathProgress>{},
            ),
          )
          as _i6.Future<Map<_i2.PathType, _i4.PathProgress>>);

  @override
  _i4.PathProgress createDefaultProgress(_i2.PathType? pathType) =>
      (super.noSuchMethod(
            Invocation.method(#createDefaultProgress, [pathType]),
            returnValue: _FakePathProgress_3(
              this,
              Invocation.method(#createDefaultProgress, [pathType]),
            ),
          )
          as _i4.PathProgress);

  @override
  _i6.Future<_i4.PathProgress> getOrCreatePathProgress(
    _i2.PathType? pathType,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getOrCreatePathProgress, [pathType]),
            returnValue: _i6.Future<_i4.PathProgress>.value(
              _FakePathProgress_3(
                this,
                Invocation.method(#getOrCreatePathProgress, [pathType]),
              ),
            ),
          )
          as _i6.Future<_i4.PathProgress>);

  @override
  _i6.Future<void> saveGameSession(_i16.GameSession? session) =>
      (super.noSuchMethod(
            Invocation.method(#saveGameSession, [session]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<_i16.GameSession?> loadGameSession() =>
      (super.noSuchMethod(
            Invocation.method(#loadGameSession, []),
            returnValue: _i6.Future<_i16.GameSession?>.value(),
          )
          as _i6.Future<_i16.GameSession?>);

  @override
  _i6.Future<void> clearGameSession() =>
      (super.noSuchMethod(
            Invocation.method(#clearGameSession, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> saveBreedAdventureHighScore(int? score) =>
      (super.noSuchMethod(
            Invocation.method(#saveBreedAdventureHighScore, [score]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<int> getBreedAdventureHighScore() =>
      (super.noSuchMethod(
            Invocation.method(#getBreedAdventureHighScore, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<void> saveGlobalStats(Map<String, dynamic>? stats) =>
      (super.noSuchMethod(
            Invocation.method(#saveGlobalStats, [stats]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<Map<String, dynamic>> loadGlobalStats() =>
      (super.noSuchMethod(
            Invocation.method(#loadGlobalStats, []),
            returnValue: _i6.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<void> updateGlobalStats({
    required int? questionsAnswered,
    required int? correctAnswers,
    required int? timeSpent,
    required int? bestStreak,
    required _i2.PathType? pathPlayed,
    bool? pathCompleted,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateGlobalStats, [], {
              #questionsAnswered: questionsAnswered,
              #correctAnswers: correctAnswers,
              #timeSpent: timeSpent,
              #bestStreak: bestStreak,
              #pathPlayed: pathPlayed,
              #pathCompleted: pathCompleted,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> saveGameSettings(Map<String, dynamic>? settings) =>
      (super.noSuchMethod(
            Invocation.method(#saveGameSettings, [settings]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<Map<String, dynamic>> loadGameSettings() =>
      (super.noSuchMethod(
            Invocation.method(#loadGameSettings, []),
            returnValue: _i6.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<void> migrateOldSaveData() =>
      (super.noSuchMethod(
            Invocation.method(#migrateOldSaveData, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> clearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllData, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<Map<String, int>> getStorageInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getStorageInfo, []),
            returnValue: _i6.Future<Map<String, int>>.value(<String, int>{}),
          )
          as _i6.Future<Map<String, int>>);
}
