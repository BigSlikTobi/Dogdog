// Mocks generated by Mockito 5.4.6 from annotations
// in dogdog_trivia_game/test/breed_adventure/integration/complete_game_flow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:dogdog_trivia_game/models/models.dart' as _i2;
import 'package:dogdog_trivia_game/services/breed_adventure/breed_adventure_timer.dart'
    as _i7;
import 'package:dogdog_trivia_game/services/breed_adventure/breed_service.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBreedChallenge_0 extends _i1.SmartFake
    implements _i2.BreedChallenge {
  _FakeBreedChallenge_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BreedService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreedService extends _i1.Mock implements _i3.BreedService {
  MockBreedService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Breed> get allBreeds =>
      (super.noSuchMethod(
            Invocation.getter(#allBreeds),
            returnValue: <_i2.Breed>[],
          )
          as List<_i2.Breed>);

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  List<_i2.Breed> getBreedsByDifficultyPhase(_i2.DifficultyPhase? phase) =>
      (super.noSuchMethod(
            Invocation.method(#getBreedsByDifficultyPhase, [phase]),
            returnValue: <_i2.Breed>[],
          )
          as List<_i2.Breed>);

  @override
  int getTotalBreedsInPhase(_i2.DifficultyPhase? phase) =>
      (super.noSuchMethod(
            Invocation.method(#getTotalBreedsInPhase, [phase]),
            returnValue: 0,
          )
          as int);

  @override
  String getLocalizedBreedName(String? breedName, _i5.Locale? locale) =>
      (super.noSuchMethod(
            Invocation.method(#getLocalizedBreedName, [breedName, locale]),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.method(#getLocalizedBreedName, [breedName, locale]),
            ),
          )
          as String);

  @override
  _i4.Future<_i2.BreedChallenge> generateChallenge(
    _i2.DifficultyPhase? phase,
    Set<String>? usedBreeds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateChallenge, [phase, usedBreeds]),
            returnValue: _i4.Future<_i2.BreedChallenge>.value(
              _FakeBreedChallenge_0(
                this,
                Invocation.method(#generateChallenge, [phase, usedBreeds]),
              ),
            ),
          )
          as _i4.Future<_i2.BreedChallenge>);

  @override
  List<_i2.Breed> getAvailableBreeds(
    _i2.DifficultyPhase? phase,
    Set<String>? usedBreeds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableBreeds, [phase, usedBreeds]),
            returnValue: <_i2.Breed>[],
          )
          as List<_i2.Breed>);

  @override
  bool hasAvailableBreeds(
    _i2.DifficultyPhase? phase,
    Set<String>? usedBreeds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#hasAvailableBreeds, [phase, usedBreeds]),
            returnValue: false,
          )
          as bool);

  @override
  _i2.Breed? getBreedByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#getBreedByName, [name]))
          as _i2.Breed?);

  @override
  List<String> getSupportedLanguages() =>
      (super.noSuchMethod(
            Invocation.method(#getSupportedLanguages, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  bool hasTranslation(String? breedName) =>
      (super.noSuchMethod(
            Invocation.method(#hasTranslation, [breedName]),
            returnValue: false,
          )
          as bool);

  @override
  Map<_i2.DifficultyPhase, int> getBreedDistribution() =>
      (super.noSuchMethod(
            Invocation.method(#getBreedDistribution, []),
            returnValue: <_i2.DifficultyPhase, int>{},
          )
          as Map<_i2.DifficultyPhase, int>);

  @override
  void reset() => super.noSuchMethod(
    Invocation.method(#reset, []),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.Breed> getBreedsForPhaseWithFallback(_i2.DifficultyPhase? phase) =>
      (super.noSuchMethod(
            Invocation.method(#getBreedsForPhaseWithFallback, [phase]),
            returnValue: <_i2.Breed>[],
          )
          as List<_i2.Breed>);

  @override
  _i4.Future<_i2.BreedChallenge> generateChallengeWithFallback(
    _i2.DifficultyPhase? phase,
    Set<String>? usedBreeds,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#generateChallengeWithFallback, [
              phase,
              usedBreeds,
            ]),
            returnValue: _i4.Future<_i2.BreedChallenge>.value(
              _FakeBreedChallenge_0(
                this,
                Invocation.method(#generateChallengeWithFallback, [
                  phase,
                  usedBreeds,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.BreedChallenge>);

  @override
  bool validateBreedData() =>
      (super.noSuchMethod(
            Invocation.method(#validateBreedData, []),
            returnValue: false,
          )
          as bool);

  @override
  _i4.Future<void> recoverFromError() =>
      (super.noSuchMethod(
            Invocation.method(#recoverFromError, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [BreedAdventureTimer].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreedAdventureTimer extends _i1.Mock
    implements _i7.BreedAdventureTimer {
  MockBreedAdventureTimer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get remainingSeconds =>
      (super.noSuchMethod(Invocation.getter(#remainingSeconds), returnValue: 0)
          as int);

  @override
  bool get isActive =>
      (super.noSuchMethod(Invocation.getter(#isActive), returnValue: false)
          as bool);

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);

  @override
  bool get isRunning =>
      (super.noSuchMethod(Invocation.getter(#isRunning), returnValue: false)
          as bool);

  @override
  bool get hasExpired =>
      (super.noSuchMethod(Invocation.getter(#hasExpired), returnValue: false)
          as bool);

  @override
  _i4.Stream<int> get timerStream =>
      (super.noSuchMethod(
            Invocation.getter(#timerStream),
            returnValue: _i4.Stream<int>.empty(),
          )
          as _i4.Stream<int>);

  @override
  bool get isCritical =>
      (super.noSuchMethod(Invocation.getter(#isCritical), returnValue: false)
          as bool);

  @override
  bool get isWarning =>
      (super.noSuchMethod(Invocation.getter(#isWarning), returnValue: false)
          as bool);

  @override
  _i7.TimerState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i7.TimerState.inactive,
          )
          as _i7.TimerState);

  @override
  void start({int? duration = 10}) => super.noSuchMethod(
    Invocation.method(#start, [], {#duration: duration}),
    returnValueForMissingStub: null,
  );

  @override
  void addTime(int? seconds) => super.noSuchMethod(
    Invocation.method(#addTime, [seconds]),
    returnValueForMissingStub: null,
  );

  @override
  void pause() => super.noSuchMethod(
    Invocation.method(#pause, []),
    returnValueForMissingStub: null,
  );

  @override
  void resume() => super.noSuchMethod(
    Invocation.method(#resume, []),
    returnValueForMissingStub: null,
  );

  @override
  void stop() => super.noSuchMethod(
    Invocation.method(#stop, []),
    returnValueForMissingStub: null,
  );

  @override
  void reset({int? duration = 10}) => super.noSuchMethod(
    Invocation.method(#reset, [], {#duration: duration}),
    returnValueForMissingStub: null,
  );

  @override
  int getElapsedTime({int? originalDuration = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getElapsedTime, [], {
              #originalDuration: originalDuration,
            }),
            returnValue: 0,
          )
          as int);

  @override
  double getProgress({int? originalDuration = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getProgress, [], {
              #originalDuration: originalDuration,
            }),
            returnValue: 0.0,
          )
          as double);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetInstance() => super.noSuchMethod(
    Invocation.method(#resetInstance, []),
    returnValueForMissingStub: null,
  );
}
